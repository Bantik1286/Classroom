#include<bits/stdc++.h>
using namespace std;



int dijkstra(int V, vector<vector<pair<int,int>>>&adj, int S, int dest)
{
	
	vector<int> d(V+1,INT_MAX);
	vector<int>vis(V+1,false);
	d[S]=0;
	set<pair<int,int>>st;
	st.insert({0,S});
	
	while(st.size()>0){
		
		auto node = st.begin();
		int v = node->second;
		int dd = node->first;
		st.erase(st.begin());
		if(vis[v])continue;
		vis[v]=true;
		
		for(int i=0; i<adj[v].size();i++){
			int nd = adj[v][i].first;
			int wt = adj[v][i].second;
			if(d[v]+wt<d[nd]){
				d[nd]=d[v]+wt;
				st.insert({d[nd],nd});
			}
		}
		
	}
	
	return d[dest];
	
}

int bfs(vector<int>adj[],int src,vector<int>&vis,vector<int>&level, int dest){
	queue<int>q;
	q.push(src);
	vis[src]=1;
	level[src]=0;
	while()
	while(!q.empty()){
		int u = q.front();
		q.pop();
		vis[u]=1;
		for(int i=0; i<adj[u].size(); i++){
			if(!vis[adj[u][i]]){
				q.push(adj[u][i]);
				level[adj[u][i]]=level[u]+1;
			}
		}
		if(level[dest]!=-1)break;
	}
	return level[dest]-1;
}

int main(){
	int n , m;
	cin>>n>>m;
	vector<int>adj[n+1];
	for(int i=0; i<m; i++){
		int u , v;
		cin>>u>>v;
		adj[u].push_back(v);
		adj[v].push_back(u);
	}
	int src ,dest;
	cin>>src>>dest;
	vector<int>vis(n+1,0);
	vector<int>level(n+1,-1);
	cout<<bfs(adj,src,vis,level,dest)<<"\n";
	

}
	
